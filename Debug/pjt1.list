
pjt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000312c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003330  08003330  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003338  08003338  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003338  08003338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070b6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ad  00000000  00000000  00027156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  00028a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ee9  00000000  00000000  00029690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009210  00000000  00000000  0004a579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c394f  00000000  00000000  00053789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001170d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fa4  00000000  00000000  00117128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800329c 	.word	0x0800329c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800329c 	.word	0x0800329c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fbd6 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f832 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8ca 	bl	8000670 <MX_GPIO_Init>
  MX_I2S3_Init();
 80004dc:	f000 f898 	bl	8000610 <MX_I2S3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80004e0:	2101      	movs	r1, #1
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <main+0x68>)
 80004e4:	f000 ff10 	bl	8001308 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d106      	bne.n	80004fc <main+0x30>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	4810      	ldr	r0, [pc, #64]	; (8000538 <main+0x6c>)
 80004f6:	f000 ff1f 	bl	8001338 <HAL_GPIO_WritePin>
 80004fa:	e005      	b.n	8000508 <main+0x3c>
	  else
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x6c>)
 8000504:	f000 ff18 	bl	8001338 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x6c>)
 8000510:	f000 ff12 	bl	8001338 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000518:	f000 fc24 	bl	8000d64 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x6c>)
 8000524:	f000 ff08 	bl	8001338 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052c:	f000 fc1a 	bl	8000d64 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000530:	e7d6      	b.n	80004e0 <main+0x14>
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000
 8000538:	40020c00 	.word	0x40020c00

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f9a0 	bl	8002890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb96 	bl	8001cf4 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f993 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fdf7 	bl	80021e4 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f97c 	bl	80008f8 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_I2S3_Init+0x54>)
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <MX_I2S3_Init+0x58>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2S3_Init+0x54>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_I2S3_Init+0x54>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2S3_Init+0x54>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_I2S3_Init+0x54>)
 8000630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000634:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_I2S3_Init+0x54>)
 8000638:	4a0c      	ldr	r2, [pc, #48]	; (800066c <MX_I2S3_Init+0x5c>)
 800063a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_I2S3_Init+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2S3_Init+0x54>)
 8000650:	f000 feb0 	bl	80013b4 <HAL_I2S_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800065a:	f000 f94d 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000008c 	.word	0x2000008c
 8000668:	40003c00 	.word	0x40003c00
 800066c:	00017700 	.word	0x00017700

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	4b95      	ldr	r3, [pc, #596]	; (80008e0 <MX_GPIO_Init+0x270>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a94      	ldr	r2, [pc, #592]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b92      	ldr	r3, [pc, #584]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	4b8e      	ldr	r3, [pc, #568]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a8d      	ldr	r2, [pc, #564]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b8b      	ldr	r3, [pc, #556]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b87      	ldr	r3, [pc, #540]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a86      	ldr	r2, [pc, #536]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b84      	ldr	r3, [pc, #528]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b80      	ldr	r3, [pc, #512]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a7f      	ldr	r2, [pc, #508]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b7d      	ldr	r3, [pc, #500]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b79      	ldr	r3, [pc, #484]	; (80008e0 <MX_GPIO_Init+0x270>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a78      	ldr	r2, [pc, #480]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b76      	ldr	r3, [pc, #472]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b72      	ldr	r3, [pc, #456]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a71      	ldr	r2, [pc, #452]	; (80008e0 <MX_GPIO_Init+0x270>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b6f      	ldr	r3, [pc, #444]	; (80008e0 <MX_GPIO_Init+0x270>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2108      	movs	r1, #8
 8000732:	486c      	ldr	r0, [pc, #432]	; (80008e4 <MX_GPIO_Init+0x274>)
 8000734:	f000 fe00 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	486a      	ldr	r0, [pc, #424]	; (80008e8 <MX_GPIO_Init+0x278>)
 800073e:	f000 fdfb 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|LEDBlue_Pin
 8000742:	2200      	movs	r2, #0
 8000744:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000748:	4868      	ldr	r0, [pc, #416]	; (80008ec <MX_GPIO_Init+0x27c>)
 800074a:	f000 fdf5 	bl	8001338 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	485f      	ldr	r0, [pc, #380]	; (80008e4 <MX_GPIO_Init+0x274>)
 8000766:	f000 fc33 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4859      	ldr	r0, [pc, #356]	; (80008e8 <MX_GPIO_Init+0x278>)
 8000782:	f000 fc25 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000786:	2308      	movs	r3, #8
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000796:	2305      	movs	r3, #5
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4851      	ldr	r0, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x278>)
 80007a2:	f000 fc15 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484d      	ldr	r0, [pc, #308]	; (80008f0 <MX_GPIO_Init+0x280>)
 80007bc:	f000 fc08 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007c0:	23e0      	movs	r3, #224	; 0xe0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d0:	2305      	movs	r3, #5
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x280>)
 80007dc:	f000 fbf8 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007e0:	2304      	movs	r3, #4
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4840      	ldr	r0, [pc, #256]	; (80008f4 <MX_GPIO_Init+0x284>)
 80007f4:	f000 fbec 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080a:	2305      	movs	r3, #5
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4837      	ldr	r0, [pc, #220]	; (80008f4 <MX_GPIO_Init+0x284>)
 8000816:	f000 fbdb 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 LEDBlue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|LEDBlue_Pin
 800081a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800081e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	482e      	ldr	r0, [pc, #184]	; (80008ec <MX_GPIO_Init+0x27c>)
 8000834:	f000 fbcc 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4828      	ldr	r0, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x280>)
 800084e:	f000 fbbf 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000852:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000864:	230a      	movs	r3, #10
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x280>)
 8000870:	f000 fbae 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000874:	2320      	movs	r3, #32
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <MX_GPIO_Init+0x27c>)
 8000888:	f000 fba2 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800088c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000892:	2312      	movs	r3, #18
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089e:	2304      	movs	r3, #4
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_GPIO_Init+0x284>)
 80008aa:	f000 fb91 	bl	8000fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x274>)
 80008c4:	f000 fb84 	bl	8000fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2006      	movs	r0, #6
 80008ce:	f000 fb48 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d2:	2006      	movs	r0, #6
 80008d4:	f000 fb61 	bl	8000f9a <HAL_NVIC_EnableIRQ>

}
 80008d8:	bf00      	nop
 80008da:	3730      	adds	r7, #48	; 0x30
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000942:	2007      	movs	r0, #7
 8000944:	f000 fb02 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a31      	ldr	r2, [pc, #196]	; (8000a44 <HAL_I2S_MspInit+0xf0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d15a      	bne.n	8000a3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000984:	2301      	movs	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000988:	23c0      	movs	r3, #192	; 0xc0
 800098a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fe11 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009a0:	f7ff ffaa 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_I2S_MspInit+0xf4>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009f8:	2310      	movs	r3, #16
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <HAL_I2S_MspInit+0xf8>)
 8000a14:	f000 fadc 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_I2S_MspInit+0xfc>)
 8000a36:	f000 facb 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3738      	adds	r7, #56	; 0x38
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40003c00 	.word	0x40003c00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f940 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	printf("teste\n");
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <EXTI0_IRQHandler+0x14>)
 8000aae:	f001 ff65 	bl	800297c <puts>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 fc5a 	bl	800136c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	080032b4 	.word	0x080032b4

08000ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
  }

  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e009      	b.n	8000b20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf1      	blt.n	8000b0c <_write+0x12>
  }
  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:

int _close(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_isatty>:

int _isatty(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f001 fe36 	bl	800283c <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20020000 	.word	0x20020000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200000d4 	.word	0x200000d4
 8000c04:	200000f0 	.word	0x200000f0

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fdf5 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc35 	bl	80004cc <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c70:	08003340 	.word	0x08003340
  ldr r2, =_sbss
 8000c74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c78:	200000ec 	.word	0x200000ec

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f94f 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe26 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f967 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f92f 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	200000d8 	.word	0x200000d8

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200000d8 	.word	0x200000d8

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <HAL_GPIO_Init+0x310>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x330>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_GPIO_Init+0x334>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_GPIO_Init+0x334>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e001      	b.n	800132a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f806 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e128      	b.n	8001618 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a90      	ldr	r2, [pc, #576]	; (8001620 <HAL_I2S_Init+0x26c>)
 80013de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fab7 	bl	8000954 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2202      	movs	r2, #2
 80013ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80013fc:	f023 030f 	bic.w	r3, r3, #15
 8001400:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2202      	movs	r2, #2
 8001408:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d060      	beq.n	80014d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800141a:	2310      	movs	r3, #16
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e001      	b.n	8001424 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001420:	2320      	movs	r3, #32
 8001422:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b20      	cmp	r3, #32
 800142a:	d802      	bhi.n	8001432 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001432:	2001      	movs	r0, #1
 8001434:	f001 f9a4 	bl	8002780 <HAL_RCCEx_GetPeriphCLKFreq>
 8001438:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001442:	d125      	bne.n	8001490 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d010      	beq.n	800146e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	fbb2 f2f3 	udiv	r2, r2, r3
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	3305      	adds	r3, #5
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	e01f      	b.n	80014ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	fbb2 f2f3 	udiv	r2, r2, r3
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	3305      	adds	r3, #5
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e00e      	b.n	80014ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fbb2 f2f3 	udiv	r2, r2, r3
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	3305      	adds	r3, #5
 80014ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <HAL_I2S_Init+0x270>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	e003      	b.n	80014dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d902      	bls.n	80014e8 <HAL_I2S_Init+0x134>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2bff      	cmp	r3, #255	; 0xff
 80014e6:	d907      	bls.n	80014f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f043 0210 	orr.w	r2, r3, #16
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e08f      	b.n	8001618 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	ea42 0103 	orr.w	r1, r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	430a      	orrs	r2, r1
 800150a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001516:	f023 030f 	bic.w	r3, r3, #15
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6851      	ldr	r1, [r2, #4]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6892      	ldr	r2, [r2, #8]
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68d2      	ldr	r2, [r2, #12]
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6992      	ldr	r2, [r2, #24]
 800152e:	430a      	orrs	r2, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800153a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d161      	bne.n	8001608 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a38      	ldr	r2, [pc, #224]	; (8001628 <HAL_I2S_Init+0x274>)
 8001548:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a37      	ldr	r2, [pc, #220]	; (800162c <HAL_I2S_Init+0x278>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_I2S_Init+0x1a4>
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_I2S_Init+0x27c>)
 8001556:	e001      	b.n	800155c <HAL_I2S_Init+0x1a8>
 8001558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4932      	ldr	r1, [pc, #200]	; (800162c <HAL_I2S_Init+0x278>)
 8001564:	428a      	cmp	r2, r1
 8001566:	d101      	bne.n	800156c <HAL_I2S_Init+0x1b8>
 8001568:	4a31      	ldr	r2, [pc, #196]	; (8001630 <HAL_I2S_Init+0x27c>)
 800156a:	e001      	b.n	8001570 <HAL_I2S_Init+0x1bc>
 800156c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001570:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001574:	f023 030f 	bic.w	r3, r3, #15
 8001578:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2b      	ldr	r2, [pc, #172]	; (800162c <HAL_I2S_Init+0x278>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_I2S_Init+0x1d4>
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_I2S_Init+0x27c>)
 8001586:	e001      	b.n	800158c <HAL_I2S_Init+0x1d8>
 8001588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800158c:	2202      	movs	r2, #2
 800158e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a25      	ldr	r2, [pc, #148]	; (800162c <HAL_I2S_Init+0x278>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_I2S_Init+0x1ea>
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_I2S_Init+0x27c>)
 800159c:	e001      	b.n	80015a2 <HAL_I2S_Init+0x1ee>
 800159e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d003      	beq.n	80015b8 <HAL_I2S_Init+0x204>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80015b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	e001      	b.n	80015c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80015d8:	4313      	orrs	r3, r2
 80015da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_I2S_Init+0x278>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_I2S_Init+0x24c>
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_I2S_Init+0x27c>)
 80015fe:	e001      	b.n	8001604 <HAL_I2S_Init+0x250>
 8001600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001604:	897a      	ldrh	r2, [r7, #10]
 8001606:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	0800172b 	.word	0x0800172b
 8001624:	cccccccd 	.word	0xcccccccd
 8001628:	08001841 	.word	0x08001841
 800162c:	40003800 	.word	0x40003800
 8001630:	40003400 	.word	0x40003400

08001634 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	1c9a      	adds	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10e      	bne.n	80016c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffb8 	bl	8001634 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	b292      	uxth	r2, r2
 80016e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	1c9a      	adds	r2, r3, #2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10e      	bne.n	8001722 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001712:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff93 	bl	8001648 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b04      	cmp	r3, #4
 8001744:	d13a      	bne.n	80017bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d109      	bne.n	8001764 <I2S_IRQHandler+0x3a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d102      	bne.n	8001764 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffb4 	bl	80016cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176a:	2b40      	cmp	r3, #64	; 0x40
 800176c:	d126      	bne.n	80017bc <I2S_IRQHandler+0x92>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d11f      	bne.n	80017bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800178a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff50 	bl	800165c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d136      	bne.n	8001836 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d109      	bne.n	80017e6 <I2S_IRQHandler+0xbc>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d102      	bne.n	80017e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff45 	bl	8001670 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d122      	bne.n	8001836 <I2S_IRQHandler+0x10c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d11b      	bne.n	8001836 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800180c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff13 	bl	800165c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800185c:	e001      	b.n	8001862 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800185e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a8b      	ldr	r2, [pc, #556]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800187a:	e001      	b.n	8001880 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800187c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188c:	d004      	beq.n	8001898 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8099 	bne.w	80019ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d107      	bne.n	80018b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f925 	bl	8001afc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f9c8 	bl	8001c5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b40      	cmp	r3, #64	; 0x40
 80018d4:	d13a      	bne.n	800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d035      	beq.n	800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80018ec:	e001      	b.n	80018f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80018ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4969      	ldr	r1, [pc, #420]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80018fa:	428b      	cmp	r3, r1
 80018fc:	d101      	bne.n	8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80018fe:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001900:	e001      	b.n	8001906 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800190a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800191a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fe88 	bl	800165c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b08      	cmp	r3, #8
 8001954:	f040 80c3 	bne.w	8001ade <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80bd 	beq.w	8001ade <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001972:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001980:	e001      	b.n	8001986 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4944      	ldr	r1, [pc, #272]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800198e:	428b      	cmp	r3, r1
 8001990:	d101      	bne.n	8001996 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001994:	e001      	b.n	800199a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800199a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800199e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f043 0204 	orr.w	r2, r3, #4
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fe4a 	bl	800165c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80019c8:	e089      	b.n	8001ade <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d107      	bne.n	80019e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8be 	bl	8001b60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8fd 	bl	8001bf8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d12f      	bne.n	8001a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02a      	beq.n	8001a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a2e:	e001      	b.n	8001a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4919      	ldr	r1, [pc, #100]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	d101      	bne.n	8001a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a42:	e001      	b.n	8001a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fdfa 	bl	800165c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d136      	bne.n	8001ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d031      	beq.n	8001ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a88:	e001      	b.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4902      	ldr	r1, [pc, #8]	; (8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a96:	428b      	cmp	r3, r1
 8001a98:	d106      	bne.n	8001aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001a9a:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a9c:	e006      	b.n	8001aac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001a9e:	bf00      	nop
 8001aa0:	40003800 	.word	0x40003800
 8001aa4:	40003400 	.word	0x40003400
 8001aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ab0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ac0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0204 	orr.w	r2, r3, #4
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fdc0 	bl	800165c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001adc:	e000      	b.n	8001ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ade:	bf00      	nop
}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c99      	adds	r1, r3, #2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d113      	bne.n	8001b56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffc9 	bl	8001ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c99      	adds	r1, r3, #2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6251      	str	r1, [r2, #36]	; 0x24
 8001b72:	8819      	ldrh	r1, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <I2SEx_TxISR_I2SExt+0x22>
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001b80:	e001      	b.n	8001b86 <I2SEx_TxISR_I2SExt+0x26>
 8001b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b86:	460a      	mov	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d121      	bne.n	8001be6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <I2SEx_TxISR_I2SExt+0x50>
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001bae:	e001      	b.n	8001bb4 <I2SEx_TxISR_I2SExt+0x54>
 8001bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <I2SEx_TxISR_I2SExt+0x90>)
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d101      	bne.n	8001bc4 <I2SEx_TxISR_I2SExt+0x64>
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <I2SEx_TxISR_I2SExt+0x94>)
 8001bc2:	e001      	b.n	8001bc8 <I2SEx_TxISR_I2SExt+0x68>
 8001bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff81 	bl	8001ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40003800 	.word	0x40003800
 8001bf4:	40003400 	.word	0x40003400

08001bf8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68d8      	ldr	r0, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	1c99      	adds	r1, r3, #2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001c10:	b282      	uxth	r2, r0
 8001c12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff4a 	bl	8001ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <I2SEx_RxISR_I2SExt+0x90>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <I2SEx_RxISR_I2SExt+0x16>
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8001c70:	e001      	b.n	8001c76 <I2SEx_RxISR_I2SExt+0x1a>
 8001c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c76:	68d8      	ldr	r0, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	1c99      	adds	r1, r3, #2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001c82:	b282      	uxth	r2, r0
 8001c84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d121      	bne.n	8001ce2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <I2SEx_RxISR_I2SExt+0x90>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <I2SEx_RxISR_I2SExt+0x50>
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8001caa:	e001      	b.n	8001cb0 <I2SEx_RxISR_I2SExt+0x54>
 8001cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <I2SEx_RxISR_I2SExt+0x90>)
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	d101      	bne.n	8001cc0 <I2SEx_RxISR_I2SExt+0x64>
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <I2SEx_RxISR_I2SExt+0x94>)
 8001cbe:	e001      	b.n	8001cc4 <I2SEx_RxISR_I2SExt+0x68>
 8001cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cc8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d106      	bne.n	8001ce2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff03 	bl	8001ae8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40003800 	.word	0x40003800
 8001cf0:	40003400 	.word	0x40003400

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e267      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b85      	ldr	r3, [pc, #532]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e242      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6f      	ldr	r2, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a68      	ldr	r2, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe ffce 	bl	8000d4c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe ffca 	bl	8000d4c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e207      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ffba 	bl	8000d4c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe ffb6 	bl	8000d4c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1f3      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1c7      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ff6f 	bl	8000d4c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7fe ff6b 	bl	8000d4c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1a8      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4925      	ldr	r1, [pc, #148]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ff4e 	bl	8000d4c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe ff4a 	bl	8000d4c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e187      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d036      	beq.n	8001f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7fe ff2e 	bl	8000d4c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe ff2a 	bl	8000d4c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e167      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff17 	bl	8000d4c <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e00e      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe ff13 	bl	8000d4c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d907      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e150      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	42470000 	.word	0x42470000
 8001f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ea      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8097 	beq.w	8002088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b77      	ldr	r3, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a73      	ldr	r2, [pc, #460]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fed3 	bl	8000d4c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fecf 	bl	8000d4c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e10c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x474>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ea>
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a63      	ldr	r2, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x30c>
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe fe94 	bl	8000d4c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fe90 	bl	8000d4c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0cb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x334>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe fe7e 	bl	8000d4c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe fe7a 	bl	8000d4c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0b5      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a1 	beq.w	80021d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d05c      	beq.n	8002158 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d141      	bne.n	800212a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fe4e 	bl	8000d4c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fe4a 	bl	8000d4c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e087      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	491b      	ldr	r1, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x478>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fe23 	bl	8000d4c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fe1f 	bl	8000d4c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e05c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x416>
 8002128:	e054      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x478>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fe0c 	bl	8000d4c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fe08 	bl	8000d4c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e045      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x470>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e038      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
 800216c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x4ec>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d028      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d121      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11a      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cc      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90c      	bls.n	8002220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494d      	ldr	r1, [pc, #308]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d044      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e067      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4934      	ldr	r1, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fd3a 	bl	8000d4c <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fd36 	bl	8000d4c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e04f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e032      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4916      	ldr	r1, [pc, #88]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 f821 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490a      	ldr	r1, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fc9a 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	080032bc 	.word	0x080032bc
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b094      	sub	sp, #80	; 0x50
 80023b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	647b      	str	r3, [r7, #68]	; 0x44
 80023bc:	2300      	movs	r3, #0
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c0:	2300      	movs	r3, #0
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c8:	4b79      	ldr	r3, [pc, #484]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x40>
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	f200 80e1 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x3a>
 80023e2:	e0db      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023e8:	e0db      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ee:	e0d8      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fa:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	2200      	movs	r2, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
 800241e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	0159      	lsls	r1, r3, #5
 8002430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002434:	0150      	lsls	r0, r2, #5
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4621      	mov	r1, r4
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	6139      	str	r1, [r7, #16]
 8002440:	4629      	mov	r1, r5
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002454:	4659      	mov	r1, fp
 8002456:	018b      	lsls	r3, r1, #6
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245e:	4651      	mov	r1, sl
 8002460:	018a      	lsls	r2, r1, #6
 8002462:	4651      	mov	r1, sl
 8002464:	ebb2 0801 	subs.w	r8, r2, r1
 8002468:	4659      	mov	r1, fp
 800246a:	eb63 0901 	sbc.w	r9, r3, r1
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002482:	4690      	mov	r8, r2
 8002484:	4699      	mov	r9, r3
 8002486:	4623      	mov	r3, r4
 8002488:	eb18 0303 	adds.w	r3, r8, r3
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	462b      	mov	r3, r5
 8002490:	eb49 0303 	adc.w	r3, r9, r3
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024a2:	4629      	mov	r1, r5
 80024a4:	024b      	lsls	r3, r1, #9
 80024a6:	4621      	mov	r1, r4
 80024a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ac:	4621      	mov	r1, r4
 80024ae:	024a      	lsls	r2, r1, #9
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b6:	2200      	movs	r2, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c0:	f7fd fe82 	bl	80001c8 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	e058      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	2200      	movs	r2, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	4611      	mov	r1, r2
 80024da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024e8:	4642      	mov	r2, r8
 80024ea:	464b      	mov	r3, r9
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	0159      	lsls	r1, r3, #5
 80024f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fa:	0150      	lsls	r0, r2, #5
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4641      	mov	r1, r8
 8002502:	ebb2 0a01 	subs.w	sl, r2, r1
 8002506:	4649      	mov	r1, r9
 8002508:	eb63 0b01 	sbc.w	fp, r3, r1
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800251c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002520:	ebb2 040a 	subs.w	r4, r2, sl
 8002524:	eb63 050b 	sbc.w	r5, r3, fp
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	00eb      	lsls	r3, r5, #3
 8002532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002536:	00e2      	lsls	r2, r4, #3
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
 800253c:	4643      	mov	r3, r8
 800253e:	18e3      	adds	r3, r4, r3
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	464b      	mov	r3, r9
 8002544:	eb45 0303 	adc.w	r3, r5, r3
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002556:	4629      	mov	r1, r5
 8002558:	028b      	lsls	r3, r1, #10
 800255a:	4621      	mov	r1, r4
 800255c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002560:	4621      	mov	r1, r4
 8002562:	028a      	lsls	r2, r1, #10
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	2200      	movs	r2, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	61fa      	str	r2, [r7, #28]
 8002570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002574:	f7fd fe28 	bl	80001c8 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3750      	adds	r7, #80	; 0x50
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d035      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fbaf 	bl	8000d4c <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025f2:	f7fe fbab 	bl	8000d4c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0b0      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002604:	4b5b      	ldr	r3, [pc, #364]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	019a      	lsls	r2, r3, #6
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	071b      	lsls	r3, r3, #28
 800261c:	4955      	ldr	r1, [pc, #340]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002624:	4b52      	ldr	r3, [pc, #328]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800262a:	f7fe fb8f 	bl	8000d4c <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002632:	f7fe fb8b 	bl	8000d4c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e090      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8083 	beq.w	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a43      	ldr	r2, [pc, #268]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3e      	ldr	r2, [pc, #248]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002686:	f7fe fb61 	bl	8000d4c <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7fe fb5d 	bl	8000d4c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e062      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02f      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d028      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d114      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fb2b 	bl	8000d4c <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fb27 	bl	8000d4c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e02a      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002728:	d10d      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800273a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273e:	490d      	ldr	r1, [pc, #52]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
 8002744:	e005      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800274c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002750:	6093      	str	r3, [r2, #8]
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002754:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	4905      	ldr	r1, [pc, #20]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002760:	4313      	orrs	r3, r2
 8002762:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	42470068 	.word	0x42470068
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000
 800277c:	42470e40 	.word	0x42470e40

08002780 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d13e      	bne.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d12f      	bne.n	8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80027b6:	617b      	str	r3, [r7, #20]
          break;
 80027b8:	e02f      	b.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c6:	d108      	bne.n	80027da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e007      	b.n	80027ea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002804:	0f1b      	lsrs	r3, r3, #28
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
          break;
 8002812:	e002      	b.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
          break;
 8002818:	bf00      	nop
        }
      }
      break;
 800281a:	bf00      	nop
    }
  }
  return frequency;
 800281c:	697b      	ldr	r3, [r7, #20]
}
 800281e:	4618      	mov	r0, r3
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	00bb8000 	.word	0x00bb8000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	00f42400 	.word	0x00f42400

0800283c <__errno>:
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <__errno+0x8>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000000c 	.word	0x2000000c

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4d0d      	ldr	r5, [pc, #52]	; (8002880 <__libc_init_array+0x38>)
 800284c:	4c0d      	ldr	r4, [pc, #52]	; (8002884 <__libc_init_array+0x3c>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	2600      	movs	r6, #0
 8002854:	42a6      	cmp	r6, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	4d0b      	ldr	r5, [pc, #44]	; (8002888 <__libc_init_array+0x40>)
 800285a:	4c0c      	ldr	r4, [pc, #48]	; (800288c <__libc_init_array+0x44>)
 800285c:	f000 fd1e 	bl	800329c <_init>
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	2600      	movs	r6, #0
 8002866:	42a6      	cmp	r6, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002870:	4798      	blx	r3
 8002872:	3601      	adds	r6, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f855 3b04 	ldr.w	r3, [r5], #4
 800287a:	4798      	blx	r3
 800287c:	3601      	adds	r6, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	08003338 	.word	0x08003338
 8002884:	08003338 	.word	0x08003338
 8002888:	08003338 	.word	0x08003338
 800288c:	0800333c 	.word	0x0800333c

08002890 <memset>:
 8002890:	4402      	add	r2, r0
 8002892:	4603      	mov	r3, r0
 8002894:	4293      	cmp	r3, r2
 8002896:	d100      	bne.n	800289a <memset+0xa>
 8002898:	4770      	bx	lr
 800289a:	f803 1b01 	strb.w	r1, [r3], #1
 800289e:	e7f9      	b.n	8002894 <memset+0x4>

080028a0 <_puts_r>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	460e      	mov	r6, r1
 80028a4:	4605      	mov	r5, r0
 80028a6:	b118      	cbz	r0, 80028b0 <_puts_r+0x10>
 80028a8:	6983      	ldr	r3, [r0, #24]
 80028aa:	b90b      	cbnz	r3, 80028b0 <_puts_r+0x10>
 80028ac:	f000 fa48 	bl	8002d40 <__sinit>
 80028b0:	69ab      	ldr	r3, [r5, #24]
 80028b2:	68ac      	ldr	r4, [r5, #8]
 80028b4:	b913      	cbnz	r3, 80028bc <_puts_r+0x1c>
 80028b6:	4628      	mov	r0, r5
 80028b8:	f000 fa42 	bl	8002d40 <__sinit>
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <_puts_r+0xd0>)
 80028be:	429c      	cmp	r4, r3
 80028c0:	d120      	bne.n	8002904 <_puts_r+0x64>
 80028c2:	686c      	ldr	r4, [r5, #4]
 80028c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028c6:	07db      	lsls	r3, r3, #31
 80028c8:	d405      	bmi.n	80028d6 <_puts_r+0x36>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	0598      	lsls	r0, r3, #22
 80028ce:	d402      	bmi.n	80028d6 <_puts_r+0x36>
 80028d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028d2:	f000 fad3 	bl	8002e7c <__retarget_lock_acquire_recursive>
 80028d6:	89a3      	ldrh	r3, [r4, #12]
 80028d8:	0719      	lsls	r1, r3, #28
 80028da:	d51d      	bpl.n	8002918 <_puts_r+0x78>
 80028dc:	6923      	ldr	r3, [r4, #16]
 80028de:	b1db      	cbz	r3, 8002918 <_puts_r+0x78>
 80028e0:	3e01      	subs	r6, #1
 80028e2:	68a3      	ldr	r3, [r4, #8]
 80028e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	bb39      	cbnz	r1, 800293e <_puts_r+0x9e>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da38      	bge.n	8002964 <_puts_r+0xc4>
 80028f2:	4622      	mov	r2, r4
 80028f4:	210a      	movs	r1, #10
 80028f6:	4628      	mov	r0, r5
 80028f8:	f000 f848 	bl	800298c <__swbuf_r>
 80028fc:	3001      	adds	r0, #1
 80028fe:	d011      	beq.n	8002924 <_puts_r+0x84>
 8002900:	250a      	movs	r5, #10
 8002902:	e011      	b.n	8002928 <_puts_r+0x88>
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <_puts_r+0xd4>)
 8002906:	429c      	cmp	r4, r3
 8002908:	d101      	bne.n	800290e <_puts_r+0x6e>
 800290a:	68ac      	ldr	r4, [r5, #8]
 800290c:	e7da      	b.n	80028c4 <_puts_r+0x24>
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <_puts_r+0xd8>)
 8002910:	429c      	cmp	r4, r3
 8002912:	bf08      	it	eq
 8002914:	68ec      	ldreq	r4, [r5, #12]
 8002916:	e7d5      	b.n	80028c4 <_puts_r+0x24>
 8002918:	4621      	mov	r1, r4
 800291a:	4628      	mov	r0, r5
 800291c:	f000 f888 	bl	8002a30 <__swsetup_r>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0dd      	beq.n	80028e0 <_puts_r+0x40>
 8002924:	f04f 35ff 	mov.w	r5, #4294967295
 8002928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800292a:	07da      	lsls	r2, r3, #31
 800292c:	d405      	bmi.n	800293a <_puts_r+0x9a>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	d402      	bmi.n	800293a <_puts_r+0x9a>
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f000 faa2 	bl	8002e7e <__retarget_lock_release_recursive>
 800293a:	4628      	mov	r0, r5
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	2b00      	cmp	r3, #0
 8002940:	da04      	bge.n	800294c <_puts_r+0xac>
 8002942:	69a2      	ldr	r2, [r4, #24]
 8002944:	429a      	cmp	r2, r3
 8002946:	dc06      	bgt.n	8002956 <_puts_r+0xb6>
 8002948:	290a      	cmp	r1, #10
 800294a:	d004      	beq.n	8002956 <_puts_r+0xb6>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	6022      	str	r2, [r4, #0]
 8002952:	7019      	strb	r1, [r3, #0]
 8002954:	e7c5      	b.n	80028e2 <_puts_r+0x42>
 8002956:	4622      	mov	r2, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f000 f817 	bl	800298c <__swbuf_r>
 800295e:	3001      	adds	r0, #1
 8002960:	d1bf      	bne.n	80028e2 <_puts_r+0x42>
 8002962:	e7df      	b.n	8002924 <_puts_r+0x84>
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	250a      	movs	r5, #10
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	6022      	str	r2, [r4, #0]
 800296c:	701d      	strb	r5, [r3, #0]
 800296e:	e7db      	b.n	8002928 <_puts_r+0x88>
 8002970:	080032f0 	.word	0x080032f0
 8002974:	08003310 	.word	0x08003310
 8002978:	080032d0 	.word	0x080032d0

0800297c <puts>:
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <puts+0xc>)
 800297e:	4601      	mov	r1, r0
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	f7ff bf8d 	b.w	80028a0 <_puts_r>
 8002986:	bf00      	nop
 8002988:	2000000c 	.word	0x2000000c

0800298c <__swbuf_r>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	460e      	mov	r6, r1
 8002990:	4614      	mov	r4, r2
 8002992:	4605      	mov	r5, r0
 8002994:	b118      	cbz	r0, 800299e <__swbuf_r+0x12>
 8002996:	6983      	ldr	r3, [r0, #24]
 8002998:	b90b      	cbnz	r3, 800299e <__swbuf_r+0x12>
 800299a:	f000 f9d1 	bl	8002d40 <__sinit>
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <__swbuf_r+0x98>)
 80029a0:	429c      	cmp	r4, r3
 80029a2:	d12b      	bne.n	80029fc <__swbuf_r+0x70>
 80029a4:	686c      	ldr	r4, [r5, #4]
 80029a6:	69a3      	ldr	r3, [r4, #24]
 80029a8:	60a3      	str	r3, [r4, #8]
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	071a      	lsls	r2, r3, #28
 80029ae:	d52f      	bpl.n	8002a10 <__swbuf_r+0x84>
 80029b0:	6923      	ldr	r3, [r4, #16]
 80029b2:	b36b      	cbz	r3, 8002a10 <__swbuf_r+0x84>
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	1ac0      	subs	r0, r0, r3
 80029ba:	6963      	ldr	r3, [r4, #20]
 80029bc:	b2f6      	uxtb	r6, r6
 80029be:	4283      	cmp	r3, r0
 80029c0:	4637      	mov	r7, r6
 80029c2:	dc04      	bgt.n	80029ce <__swbuf_r+0x42>
 80029c4:	4621      	mov	r1, r4
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 f926 	bl	8002c18 <_fflush_r>
 80029cc:	bb30      	cbnz	r0, 8002a1c <__swbuf_r+0x90>
 80029ce:	68a3      	ldr	r3, [r4, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60a3      	str	r3, [r4, #8]
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	6022      	str	r2, [r4, #0]
 80029da:	701e      	strb	r6, [r3, #0]
 80029dc:	6963      	ldr	r3, [r4, #20]
 80029de:	3001      	adds	r0, #1
 80029e0:	4283      	cmp	r3, r0
 80029e2:	d004      	beq.n	80029ee <__swbuf_r+0x62>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	07db      	lsls	r3, r3, #31
 80029e8:	d506      	bpl.n	80029f8 <__swbuf_r+0x6c>
 80029ea:	2e0a      	cmp	r6, #10
 80029ec:	d104      	bne.n	80029f8 <__swbuf_r+0x6c>
 80029ee:	4621      	mov	r1, r4
 80029f0:	4628      	mov	r0, r5
 80029f2:	f000 f911 	bl	8002c18 <_fflush_r>
 80029f6:	b988      	cbnz	r0, 8002a1c <__swbuf_r+0x90>
 80029f8:	4638      	mov	r0, r7
 80029fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <__swbuf_r+0x9c>)
 80029fe:	429c      	cmp	r4, r3
 8002a00:	d101      	bne.n	8002a06 <__swbuf_r+0x7a>
 8002a02:	68ac      	ldr	r4, [r5, #8]
 8002a04:	e7cf      	b.n	80029a6 <__swbuf_r+0x1a>
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <__swbuf_r+0xa0>)
 8002a08:	429c      	cmp	r4, r3
 8002a0a:	bf08      	it	eq
 8002a0c:	68ec      	ldreq	r4, [r5, #12]
 8002a0e:	e7ca      	b.n	80029a6 <__swbuf_r+0x1a>
 8002a10:	4621      	mov	r1, r4
 8002a12:	4628      	mov	r0, r5
 8002a14:	f000 f80c 	bl	8002a30 <__swsetup_r>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d0cb      	beq.n	80029b4 <__swbuf_r+0x28>
 8002a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a20:	e7ea      	b.n	80029f8 <__swbuf_r+0x6c>
 8002a22:	bf00      	nop
 8002a24:	080032f0 	.word	0x080032f0
 8002a28:	08003310 	.word	0x08003310
 8002a2c:	080032d0 	.word	0x080032d0

08002a30 <__swsetup_r>:
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <__swsetup_r+0xcc>)
 8002a32:	b570      	push	{r4, r5, r6, lr}
 8002a34:	681d      	ldr	r5, [r3, #0]
 8002a36:	4606      	mov	r6, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	b125      	cbz	r5, 8002a46 <__swsetup_r+0x16>
 8002a3c:	69ab      	ldr	r3, [r5, #24]
 8002a3e:	b913      	cbnz	r3, 8002a46 <__swsetup_r+0x16>
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 f97d 	bl	8002d40 <__sinit>
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <__swsetup_r+0xd0>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d10f      	bne.n	8002a6c <__swsetup_r+0x3c>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a54:	0719      	lsls	r1, r3, #28
 8002a56:	d42c      	bmi.n	8002ab2 <__swsetup_r+0x82>
 8002a58:	06dd      	lsls	r5, r3, #27
 8002a5a:	d411      	bmi.n	8002a80 <__swsetup_r+0x50>
 8002a5c:	2309      	movs	r3, #9
 8002a5e:	6033      	str	r3, [r6, #0]
 8002a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6a:	e03e      	b.n	8002aea <__swsetup_r+0xba>
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <__swsetup_r+0xd4>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d101      	bne.n	8002a76 <__swsetup_r+0x46>
 8002a72:	68ac      	ldr	r4, [r5, #8]
 8002a74:	e7eb      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <__swsetup_r+0xd8>)
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	bf08      	it	eq
 8002a7c:	68ec      	ldreq	r4, [r5, #12]
 8002a7e:	e7e6      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a80:	0758      	lsls	r0, r3, #29
 8002a82:	d512      	bpl.n	8002aaa <__swsetup_r+0x7a>
 8002a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a86:	b141      	cbz	r1, 8002a9a <__swsetup_r+0x6a>
 8002a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <__swsetup_r+0x66>
 8002a90:	4630      	mov	r0, r6
 8002a92:	f000 fa5b 	bl	8002f4c <_free_r>
 8002a96:	2300      	movs	r3, #0
 8002a98:	6363      	str	r3, [r4, #52]	; 0x34
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	6923      	ldr	r3, [r4, #16]
 8002ab4:	b94b      	cbnz	r3, 8002aca <__swsetup_r+0x9a>
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d003      	beq.n	8002aca <__swsetup_r+0x9a>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 fa01 	bl	8002ecc <__smakebuf_r>
 8002aca:	89a0      	ldrh	r0, [r4, #12]
 8002acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ad0:	f010 0301 	ands.w	r3, r0, #1
 8002ad4:	d00a      	beq.n	8002aec <__swsetup_r+0xbc>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60a3      	str	r3, [r4, #8]
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	425b      	negs	r3, r3
 8002ade:	61a3      	str	r3, [r4, #24]
 8002ae0:	6923      	ldr	r3, [r4, #16]
 8002ae2:	b943      	cbnz	r3, 8002af6 <__swsetup_r+0xc6>
 8002ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ae8:	d1ba      	bne.n	8002a60 <__swsetup_r+0x30>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	0781      	lsls	r1, r0, #30
 8002aee:	bf58      	it	pl
 8002af0:	6963      	ldrpl	r3, [r4, #20]
 8002af2:	60a3      	str	r3, [r4, #8]
 8002af4:	e7f4      	b.n	8002ae0 <__swsetup_r+0xb0>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e7f7      	b.n	8002aea <__swsetup_r+0xba>
 8002afa:	bf00      	nop
 8002afc:	2000000c 	.word	0x2000000c
 8002b00:	080032f0 	.word	0x080032f0
 8002b04:	08003310 	.word	0x08003310
 8002b08:	080032d0 	.word	0x080032d0

08002b0c <__sflush_r>:
 8002b0c:	898a      	ldrh	r2, [r1, #12]
 8002b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b12:	4605      	mov	r5, r0
 8002b14:	0710      	lsls	r0, r2, #28
 8002b16:	460c      	mov	r4, r1
 8002b18:	d458      	bmi.n	8002bcc <__sflush_r+0xc0>
 8002b1a:	684b      	ldr	r3, [r1, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dc05      	bgt.n	8002b2c <__sflush_r+0x20>
 8002b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	dc02      	bgt.n	8002b2c <__sflush_r+0x20>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b2e:	2e00      	cmp	r6, #0
 8002b30:	d0f9      	beq.n	8002b26 <__sflush_r+0x1a>
 8002b32:	2300      	movs	r3, #0
 8002b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b38:	682f      	ldr	r7, [r5, #0]
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	d032      	beq.n	8002ba4 <__sflush_r+0x98>
 8002b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	075a      	lsls	r2, r3, #29
 8002b44:	d505      	bpl.n	8002b52 <__sflush_r+0x46>
 8002b46:	6863      	ldr	r3, [r4, #4]
 8002b48:	1ac0      	subs	r0, r0, r3
 8002b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b4c:	b10b      	cbz	r3, 8002b52 <__sflush_r+0x46>
 8002b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b50:	1ac0      	subs	r0, r0, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	4602      	mov	r2, r0
 8002b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b58:	6a21      	ldr	r1, [r4, #32]
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	47b0      	blx	r6
 8002b5e:	1c43      	adds	r3, r0, #1
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	d106      	bne.n	8002b72 <__sflush_r+0x66>
 8002b64:	6829      	ldr	r1, [r5, #0]
 8002b66:	291d      	cmp	r1, #29
 8002b68:	d82c      	bhi.n	8002bc4 <__sflush_r+0xb8>
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <__sflush_r+0x108>)
 8002b6c:	40ca      	lsrs	r2, r1
 8002b6e:	07d6      	lsls	r6, r2, #31
 8002b70:	d528      	bpl.n	8002bc4 <__sflush_r+0xb8>
 8002b72:	2200      	movs	r2, #0
 8002b74:	6062      	str	r2, [r4, #4]
 8002b76:	04d9      	lsls	r1, r3, #19
 8002b78:	6922      	ldr	r2, [r4, #16]
 8002b7a:	6022      	str	r2, [r4, #0]
 8002b7c:	d504      	bpl.n	8002b88 <__sflush_r+0x7c>
 8002b7e:	1c42      	adds	r2, r0, #1
 8002b80:	d101      	bne.n	8002b86 <__sflush_r+0x7a>
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	b903      	cbnz	r3, 8002b88 <__sflush_r+0x7c>
 8002b86:	6560      	str	r0, [r4, #84]	; 0x54
 8002b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b8a:	602f      	str	r7, [r5, #0]
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d0ca      	beq.n	8002b26 <__sflush_r+0x1a>
 8002b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b94:	4299      	cmp	r1, r3
 8002b96:	d002      	beq.n	8002b9e <__sflush_r+0x92>
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f000 f9d7 	bl	8002f4c <_free_r>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8002ba2:	e7c1      	b.n	8002b28 <__sflush_r+0x1c>
 8002ba4:	6a21      	ldr	r1, [r4, #32]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4628      	mov	r0, r5
 8002baa:	47b0      	blx	r6
 8002bac:	1c41      	adds	r1, r0, #1
 8002bae:	d1c7      	bne.n	8002b40 <__sflush_r+0x34>
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0c4      	beq.n	8002b40 <__sflush_r+0x34>
 8002bb6:	2b1d      	cmp	r3, #29
 8002bb8:	d001      	beq.n	8002bbe <__sflush_r+0xb2>
 8002bba:	2b16      	cmp	r3, #22
 8002bbc:	d101      	bne.n	8002bc2 <__sflush_r+0xb6>
 8002bbe:	602f      	str	r7, [r5, #0]
 8002bc0:	e7b1      	b.n	8002b26 <__sflush_r+0x1a>
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	e7ad      	b.n	8002b28 <__sflush_r+0x1c>
 8002bcc:	690f      	ldr	r7, [r1, #16]
 8002bce:	2f00      	cmp	r7, #0
 8002bd0:	d0a9      	beq.n	8002b26 <__sflush_r+0x1a>
 8002bd2:	0793      	lsls	r3, r2, #30
 8002bd4:	680e      	ldr	r6, [r1, #0]
 8002bd6:	bf08      	it	eq
 8002bd8:	694b      	ldreq	r3, [r1, #20]
 8002bda:	600f      	str	r7, [r1, #0]
 8002bdc:	bf18      	it	ne
 8002bde:	2300      	movne	r3, #0
 8002be0:	eba6 0807 	sub.w	r8, r6, r7
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	f1b8 0f00 	cmp.w	r8, #0
 8002bea:	dd9c      	ble.n	8002b26 <__sflush_r+0x1a>
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	463a      	mov	r2, r7
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	47b0      	blx	r6
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	dc06      	bgt.n	8002c0a <__sflush_r+0xfe>
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	e78e      	b.n	8002b28 <__sflush_r+0x1c>
 8002c0a:	4407      	add	r7, r0
 8002c0c:	eba8 0800 	sub.w	r8, r8, r0
 8002c10:	e7e9      	b.n	8002be6 <__sflush_r+0xda>
 8002c12:	bf00      	nop
 8002c14:	20400001 	.word	0x20400001

08002c18 <_fflush_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	b913      	cbnz	r3, 8002c28 <_fflush_r+0x10>
 8002c22:	2500      	movs	r5, #0
 8002c24:	4628      	mov	r0, r5
 8002c26:	bd38      	pop	{r3, r4, r5, pc}
 8002c28:	b118      	cbz	r0, 8002c32 <_fflush_r+0x1a>
 8002c2a:	6983      	ldr	r3, [r0, #24]
 8002c2c:	b90b      	cbnz	r3, 8002c32 <_fflush_r+0x1a>
 8002c2e:	f000 f887 	bl	8002d40 <__sinit>
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <_fflush_r+0x6c>)
 8002c34:	429c      	cmp	r4, r3
 8002c36:	d11b      	bne.n	8002c70 <_fflush_r+0x58>
 8002c38:	686c      	ldr	r4, [r5, #4]
 8002c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ef      	beq.n	8002c22 <_fflush_r+0xa>
 8002c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c44:	07d0      	lsls	r0, r2, #31
 8002c46:	d404      	bmi.n	8002c52 <_fflush_r+0x3a>
 8002c48:	0599      	lsls	r1, r3, #22
 8002c4a:	d402      	bmi.n	8002c52 <_fflush_r+0x3a>
 8002c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c4e:	f000 f915 	bl	8002e7c <__retarget_lock_acquire_recursive>
 8002c52:	4628      	mov	r0, r5
 8002c54:	4621      	mov	r1, r4
 8002c56:	f7ff ff59 	bl	8002b0c <__sflush_r>
 8002c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c5c:	07da      	lsls	r2, r3, #31
 8002c5e:	4605      	mov	r5, r0
 8002c60:	d4e0      	bmi.n	8002c24 <_fflush_r+0xc>
 8002c62:	89a3      	ldrh	r3, [r4, #12]
 8002c64:	059b      	lsls	r3, r3, #22
 8002c66:	d4dd      	bmi.n	8002c24 <_fflush_r+0xc>
 8002c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c6a:	f000 f908 	bl	8002e7e <__retarget_lock_release_recursive>
 8002c6e:	e7d9      	b.n	8002c24 <_fflush_r+0xc>
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <_fflush_r+0x70>)
 8002c72:	429c      	cmp	r4, r3
 8002c74:	d101      	bne.n	8002c7a <_fflush_r+0x62>
 8002c76:	68ac      	ldr	r4, [r5, #8]
 8002c78:	e7df      	b.n	8002c3a <_fflush_r+0x22>
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <_fflush_r+0x74>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	bf08      	it	eq
 8002c80:	68ec      	ldreq	r4, [r5, #12]
 8002c82:	e7da      	b.n	8002c3a <_fflush_r+0x22>
 8002c84:	080032f0 	.word	0x080032f0
 8002c88:	08003310 	.word	0x08003310
 8002c8c:	080032d0 	.word	0x080032d0

08002c90 <std>:
 8002c90:	2300      	movs	r3, #0
 8002c92:	b510      	push	{r4, lr}
 8002c94:	4604      	mov	r4, r0
 8002c96:	e9c0 3300 	strd	r3, r3, [r0]
 8002c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c9e:	6083      	str	r3, [r0, #8]
 8002ca0:	8181      	strh	r1, [r0, #12]
 8002ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8002ca4:	81c2      	strh	r2, [r0, #14]
 8002ca6:	6183      	str	r3, [r0, #24]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	2208      	movs	r2, #8
 8002cac:	305c      	adds	r0, #92	; 0x5c
 8002cae:	f7ff fdef 	bl	8002890 <memset>
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <std+0x38>)
 8002cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <std+0x3c>)
 8002cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <std+0x40>)
 8002cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <std+0x44>)
 8002cc0:	6224      	str	r4, [r4, #32]
 8002cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	bf00      	nop
 8002cc8:	0800312d 	.word	0x0800312d
 8002ccc:	0800314f 	.word	0x0800314f
 8002cd0:	08003187 	.word	0x08003187
 8002cd4:	080031ab 	.word	0x080031ab

08002cd8 <_cleanup_r>:
 8002cd8:	4901      	ldr	r1, [pc, #4]	; (8002ce0 <_cleanup_r+0x8>)
 8002cda:	f000 b8af 	b.w	8002e3c <_fwalk_reent>
 8002cde:	bf00      	nop
 8002ce0:	08002c19 	.word	0x08002c19

08002ce4 <__sfmoreglue>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	2268      	movs	r2, #104	; 0x68
 8002ce8:	1e4d      	subs	r5, r1, #1
 8002cea:	4355      	muls	r5, r2
 8002cec:	460e      	mov	r6, r1
 8002cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cf2:	f000 f997 	bl	8003024 <_malloc_r>
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	b140      	cbz	r0, 8002d0c <__sfmoreglue+0x28>
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8002d00:	300c      	adds	r0, #12
 8002d02:	60a0      	str	r0, [r4, #8]
 8002d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d08:	f7ff fdc2 	bl	8002890 <memset>
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}

08002d10 <__sfp_lock_acquire>:
 8002d10:	4801      	ldr	r0, [pc, #4]	; (8002d18 <__sfp_lock_acquire+0x8>)
 8002d12:	f000 b8b3 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8002d16:	bf00      	nop
 8002d18:	200000dd 	.word	0x200000dd

08002d1c <__sfp_lock_release>:
 8002d1c:	4801      	ldr	r0, [pc, #4]	; (8002d24 <__sfp_lock_release+0x8>)
 8002d1e:	f000 b8ae 	b.w	8002e7e <__retarget_lock_release_recursive>
 8002d22:	bf00      	nop
 8002d24:	200000dd 	.word	0x200000dd

08002d28 <__sinit_lock_acquire>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__sinit_lock_acquire+0x8>)
 8002d2a:	f000 b8a7 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	200000de 	.word	0x200000de

08002d34 <__sinit_lock_release>:
 8002d34:	4801      	ldr	r0, [pc, #4]	; (8002d3c <__sinit_lock_release+0x8>)
 8002d36:	f000 b8a2 	b.w	8002e7e <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	200000de 	.word	0x200000de

08002d40 <__sinit>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	f7ff fff0 	bl	8002d28 <__sinit_lock_acquire>
 8002d48:	69a3      	ldr	r3, [r4, #24]
 8002d4a:	b11b      	cbz	r3, 8002d54 <__sinit+0x14>
 8002d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d50:	f7ff bff0 	b.w	8002d34 <__sinit_lock_release>
 8002d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d58:	6523      	str	r3, [r4, #80]	; 0x50
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <__sinit+0x68>)
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <__sinit+0x6c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d62:	42a3      	cmp	r3, r4
 8002d64:	bf04      	itt	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	61a3      	streq	r3, [r4, #24]
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 f820 	bl	8002db0 <__sfp>
 8002d70:	6060      	str	r0, [r4, #4]
 8002d72:	4620      	mov	r0, r4
 8002d74:	f000 f81c 	bl	8002db0 <__sfp>
 8002d78:	60a0      	str	r0, [r4, #8]
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 f818 	bl	8002db0 <__sfp>
 8002d80:	2200      	movs	r2, #0
 8002d82:	60e0      	str	r0, [r4, #12]
 8002d84:	2104      	movs	r1, #4
 8002d86:	6860      	ldr	r0, [r4, #4]
 8002d88:	f7ff ff82 	bl	8002c90 <std>
 8002d8c:	68a0      	ldr	r0, [r4, #8]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2109      	movs	r1, #9
 8002d92:	f7ff ff7d 	bl	8002c90 <std>
 8002d96:	68e0      	ldr	r0, [r4, #12]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	2112      	movs	r1, #18
 8002d9c:	f7ff ff78 	bl	8002c90 <std>
 8002da0:	2301      	movs	r3, #1
 8002da2:	61a3      	str	r3, [r4, #24]
 8002da4:	e7d2      	b.n	8002d4c <__sinit+0xc>
 8002da6:	bf00      	nop
 8002da8:	080032cc 	.word	0x080032cc
 8002dac:	08002cd9 	.word	0x08002cd9

08002db0 <__sfp>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	4607      	mov	r7, r0
 8002db4:	f7ff ffac 	bl	8002d10 <__sfp_lock_acquire>
 8002db8:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <__sfp+0x84>)
 8002dba:	681e      	ldr	r6, [r3, #0]
 8002dbc:	69b3      	ldr	r3, [r6, #24]
 8002dbe:	b913      	cbnz	r3, 8002dc6 <__sfp+0x16>
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f7ff ffbd 	bl	8002d40 <__sinit>
 8002dc6:	3648      	adds	r6, #72	; 0x48
 8002dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	d503      	bpl.n	8002dd8 <__sfp+0x28>
 8002dd0:	6833      	ldr	r3, [r6, #0]
 8002dd2:	b30b      	cbz	r3, 8002e18 <__sfp+0x68>
 8002dd4:	6836      	ldr	r6, [r6, #0]
 8002dd6:	e7f7      	b.n	8002dc8 <__sfp+0x18>
 8002dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ddc:	b9d5      	cbnz	r5, 8002e14 <__sfp+0x64>
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <__sfp+0x88>)
 8002de0:	60e3      	str	r3, [r4, #12]
 8002de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002de6:	6665      	str	r5, [r4, #100]	; 0x64
 8002de8:	f000 f847 	bl	8002e7a <__retarget_lock_init_recursive>
 8002dec:	f7ff ff96 	bl	8002d1c <__sfp_lock_release>
 8002df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002df8:	6025      	str	r5, [r4, #0]
 8002dfa:	61a5      	str	r5, [r4, #24]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e04:	f7ff fd44 	bl	8002890 <memset>
 8002e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e10:	4620      	mov	r0, r4
 8002e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e14:	3468      	adds	r4, #104	; 0x68
 8002e16:	e7d9      	b.n	8002dcc <__sfp+0x1c>
 8002e18:	2104      	movs	r1, #4
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	f7ff ff62 	bl	8002ce4 <__sfmoreglue>
 8002e20:	4604      	mov	r4, r0
 8002e22:	6030      	str	r0, [r6, #0]
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1d5      	bne.n	8002dd4 <__sfp+0x24>
 8002e28:	f7ff ff78 	bl	8002d1c <__sfp_lock_release>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	e7ee      	b.n	8002e10 <__sfp+0x60>
 8002e32:	bf00      	nop
 8002e34:	080032cc 	.word	0x080032cc
 8002e38:	ffff0001 	.word	0xffff0001

08002e3c <_fwalk_reent>:
 8002e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e40:	4606      	mov	r6, r0
 8002e42:	4688      	mov	r8, r1
 8002e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e48:	2700      	movs	r7, #0
 8002e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8002e52:	d505      	bpl.n	8002e60 <_fwalk_reent+0x24>
 8002e54:	6824      	ldr	r4, [r4, #0]
 8002e56:	2c00      	cmp	r4, #0
 8002e58:	d1f7      	bne.n	8002e4a <_fwalk_reent+0xe>
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e60:	89ab      	ldrh	r3, [r5, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d907      	bls.n	8002e76 <_fwalk_reent+0x3a>
 8002e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	d003      	beq.n	8002e76 <_fwalk_reent+0x3a>
 8002e6e:	4629      	mov	r1, r5
 8002e70:	4630      	mov	r0, r6
 8002e72:	47c0      	blx	r8
 8002e74:	4307      	orrs	r7, r0
 8002e76:	3568      	adds	r5, #104	; 0x68
 8002e78:	e7e9      	b.n	8002e4e <_fwalk_reent+0x12>

08002e7a <__retarget_lock_init_recursive>:
 8002e7a:	4770      	bx	lr

08002e7c <__retarget_lock_acquire_recursive>:
 8002e7c:	4770      	bx	lr

08002e7e <__retarget_lock_release_recursive>:
 8002e7e:	4770      	bx	lr

08002e80 <__swhatbuf_r>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	460e      	mov	r6, r1
 8002e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e88:	2900      	cmp	r1, #0
 8002e8a:	b096      	sub	sp, #88	; 0x58
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	da08      	bge.n	8002ea4 <__swhatbuf_r+0x24>
 8002e92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	602a      	str	r2, [r5, #0]
 8002e9a:	061a      	lsls	r2, r3, #24
 8002e9c:	d410      	bmi.n	8002ec0 <__swhatbuf_r+0x40>
 8002e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea2:	e00e      	b.n	8002ec2 <__swhatbuf_r+0x42>
 8002ea4:	466a      	mov	r2, sp
 8002ea6:	f000 f9a7 	bl	80031f8 <_fstat_r>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	dbf1      	blt.n	8002e92 <__swhatbuf_r+0x12>
 8002eae:	9a01      	ldr	r2, [sp, #4]
 8002eb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002eb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002eb8:	425a      	negs	r2, r3
 8002eba:	415a      	adcs	r2, r3
 8002ebc:	602a      	str	r2, [r5, #0]
 8002ebe:	e7ee      	b.n	8002e9e <__swhatbuf_r+0x1e>
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	b016      	add	sp, #88	; 0x58
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ecc <__smakebuf_r>:
 8002ecc:	898b      	ldrh	r3, [r1, #12]
 8002ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ed0:	079d      	lsls	r5, r3, #30
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	d507      	bpl.n	8002ee8 <__smakebuf_r+0x1c>
 8002ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	6123      	str	r3, [r4, #16]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	6163      	str	r3, [r4, #20]
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	ab01      	add	r3, sp, #4
 8002eea:	466a      	mov	r2, sp
 8002eec:	f7ff ffc8 	bl	8002e80 <__swhatbuf_r>
 8002ef0:	9900      	ldr	r1, [sp, #0]
 8002ef2:	4605      	mov	r5, r0
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f000 f895 	bl	8003024 <_malloc_r>
 8002efa:	b948      	cbnz	r0, 8002f10 <__smakebuf_r+0x44>
 8002efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f00:	059a      	lsls	r2, r3, #22
 8002f02:	d4ef      	bmi.n	8002ee4 <__smakebuf_r+0x18>
 8002f04:	f023 0303 	bic.w	r3, r3, #3
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	e7e3      	b.n	8002ed8 <__smakebuf_r+0xc>
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <__smakebuf_r+0x7c>)
 8002f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	6020      	str	r0, [r4, #0]
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	9b00      	ldr	r3, [sp, #0]
 8002f20:	6163      	str	r3, [r4, #20]
 8002f22:	9b01      	ldr	r3, [sp, #4]
 8002f24:	6120      	str	r0, [r4, #16]
 8002f26:	b15b      	cbz	r3, 8002f40 <__smakebuf_r+0x74>
 8002f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	f000 f975 	bl	800321c <_isatty_r>
 8002f32:	b128      	cbz	r0, 8002f40 <__smakebuf_r+0x74>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	89a0      	ldrh	r0, [r4, #12]
 8002f42:	4305      	orrs	r5, r0
 8002f44:	81a5      	strh	r5, [r4, #12]
 8002f46:	e7cd      	b.n	8002ee4 <__smakebuf_r+0x18>
 8002f48:	08002cd9 	.word	0x08002cd9

08002f4c <_free_r>:
 8002f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	d044      	beq.n	8002fdc <_free_r+0x90>
 8002f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f56:	9001      	str	r0, [sp, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8002f5e:	bfb8      	it	lt
 8002f60:	18e4      	addlt	r4, r4, r3
 8002f62:	f000 f97d 	bl	8003260 <__malloc_lock>
 8002f66:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <_free_r+0x94>)
 8002f68:	9801      	ldr	r0, [sp, #4]
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	b933      	cbnz	r3, 8002f7c <_free_r+0x30>
 8002f6e:	6063      	str	r3, [r4, #4]
 8002f70:	6014      	str	r4, [r2, #0]
 8002f72:	b003      	add	sp, #12
 8002f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f78:	f000 b978 	b.w	800326c <__malloc_unlock>
 8002f7c:	42a3      	cmp	r3, r4
 8002f7e:	d908      	bls.n	8002f92 <_free_r+0x46>
 8002f80:	6825      	ldr	r5, [r4, #0]
 8002f82:	1961      	adds	r1, r4, r5
 8002f84:	428b      	cmp	r3, r1
 8002f86:	bf01      	itttt	eq
 8002f88:	6819      	ldreq	r1, [r3, #0]
 8002f8a:	685b      	ldreq	r3, [r3, #4]
 8002f8c:	1949      	addeq	r1, r1, r5
 8002f8e:	6021      	streq	r1, [r4, #0]
 8002f90:	e7ed      	b.n	8002f6e <_free_r+0x22>
 8002f92:	461a      	mov	r2, r3
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	b10b      	cbz	r3, 8002f9c <_free_r+0x50>
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	d9fa      	bls.n	8002f92 <_free_r+0x46>
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	1855      	adds	r5, r2, r1
 8002fa0:	42a5      	cmp	r5, r4
 8002fa2:	d10b      	bne.n	8002fbc <_free_r+0x70>
 8002fa4:	6824      	ldr	r4, [r4, #0]
 8002fa6:	4421      	add	r1, r4
 8002fa8:	1854      	adds	r4, r2, r1
 8002faa:	42a3      	cmp	r3, r4
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	d1e0      	bne.n	8002f72 <_free_r+0x26>
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	6053      	str	r3, [r2, #4]
 8002fb6:	4421      	add	r1, r4
 8002fb8:	6011      	str	r1, [r2, #0]
 8002fba:	e7da      	b.n	8002f72 <_free_r+0x26>
 8002fbc:	d902      	bls.n	8002fc4 <_free_r+0x78>
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	6003      	str	r3, [r0, #0]
 8002fc2:	e7d6      	b.n	8002f72 <_free_r+0x26>
 8002fc4:	6825      	ldr	r5, [r4, #0]
 8002fc6:	1961      	adds	r1, r4, r5
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	bf04      	itt	eq
 8002fcc:	6819      	ldreq	r1, [r3, #0]
 8002fce:	685b      	ldreq	r3, [r3, #4]
 8002fd0:	6063      	str	r3, [r4, #4]
 8002fd2:	bf04      	itt	eq
 8002fd4:	1949      	addeq	r1, r1, r5
 8002fd6:	6021      	streq	r1, [r4, #0]
 8002fd8:	6054      	str	r4, [r2, #4]
 8002fda:	e7ca      	b.n	8002f72 <_free_r+0x26>
 8002fdc:	b003      	add	sp, #12
 8002fde:	bd30      	pop	{r4, r5, pc}
 8002fe0:	200000e0 	.word	0x200000e0

08002fe4 <sbrk_aligned>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	4e0e      	ldr	r6, [pc, #56]	; (8003020 <sbrk_aligned+0x3c>)
 8002fe8:	460c      	mov	r4, r1
 8002fea:	6831      	ldr	r1, [r6, #0]
 8002fec:	4605      	mov	r5, r0
 8002fee:	b911      	cbnz	r1, 8002ff6 <sbrk_aligned+0x12>
 8002ff0:	f000 f88c 	bl	800310c <_sbrk_r>
 8002ff4:	6030      	str	r0, [r6, #0]
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f887 	bl	800310c <_sbrk_r>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d00a      	beq.n	8003018 <sbrk_aligned+0x34>
 8003002:	1cc4      	adds	r4, r0, #3
 8003004:	f024 0403 	bic.w	r4, r4, #3
 8003008:	42a0      	cmp	r0, r4
 800300a:	d007      	beq.n	800301c <sbrk_aligned+0x38>
 800300c:	1a21      	subs	r1, r4, r0
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f87c 	bl	800310c <_sbrk_r>
 8003014:	3001      	adds	r0, #1
 8003016:	d101      	bne.n	800301c <sbrk_aligned+0x38>
 8003018:	f04f 34ff 	mov.w	r4, #4294967295
 800301c:	4620      	mov	r0, r4
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	200000e4 	.word	0x200000e4

08003024 <_malloc_r>:
 8003024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003028:	1ccd      	adds	r5, r1, #3
 800302a:	f025 0503 	bic.w	r5, r5, #3
 800302e:	3508      	adds	r5, #8
 8003030:	2d0c      	cmp	r5, #12
 8003032:	bf38      	it	cc
 8003034:	250c      	movcc	r5, #12
 8003036:	2d00      	cmp	r5, #0
 8003038:	4607      	mov	r7, r0
 800303a:	db01      	blt.n	8003040 <_malloc_r+0x1c>
 800303c:	42a9      	cmp	r1, r5
 800303e:	d905      	bls.n	800304c <_malloc_r+0x28>
 8003040:	230c      	movs	r3, #12
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	2600      	movs	r6, #0
 8003046:	4630      	mov	r0, r6
 8003048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800304c:	4e2e      	ldr	r6, [pc, #184]	; (8003108 <_malloc_r+0xe4>)
 800304e:	f000 f907 	bl	8003260 <__malloc_lock>
 8003052:	6833      	ldr	r3, [r6, #0]
 8003054:	461c      	mov	r4, r3
 8003056:	bb34      	cbnz	r4, 80030a6 <_malloc_r+0x82>
 8003058:	4629      	mov	r1, r5
 800305a:	4638      	mov	r0, r7
 800305c:	f7ff ffc2 	bl	8002fe4 <sbrk_aligned>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	4604      	mov	r4, r0
 8003064:	d14d      	bne.n	8003102 <_malloc_r+0xde>
 8003066:	6834      	ldr	r4, [r6, #0]
 8003068:	4626      	mov	r6, r4
 800306a:	2e00      	cmp	r6, #0
 800306c:	d140      	bne.n	80030f0 <_malloc_r+0xcc>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	4631      	mov	r1, r6
 8003072:	4638      	mov	r0, r7
 8003074:	eb04 0803 	add.w	r8, r4, r3
 8003078:	f000 f848 	bl	800310c <_sbrk_r>
 800307c:	4580      	cmp	r8, r0
 800307e:	d13a      	bne.n	80030f6 <_malloc_r+0xd2>
 8003080:	6821      	ldr	r1, [r4, #0]
 8003082:	3503      	adds	r5, #3
 8003084:	1a6d      	subs	r5, r5, r1
 8003086:	f025 0503 	bic.w	r5, r5, #3
 800308a:	3508      	adds	r5, #8
 800308c:	2d0c      	cmp	r5, #12
 800308e:	bf38      	it	cc
 8003090:	250c      	movcc	r5, #12
 8003092:	4629      	mov	r1, r5
 8003094:	4638      	mov	r0, r7
 8003096:	f7ff ffa5 	bl	8002fe4 <sbrk_aligned>
 800309a:	3001      	adds	r0, #1
 800309c:	d02b      	beq.n	80030f6 <_malloc_r+0xd2>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	442b      	add	r3, r5
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	e00e      	b.n	80030c4 <_malloc_r+0xa0>
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	1b52      	subs	r2, r2, r5
 80030aa:	d41e      	bmi.n	80030ea <_malloc_r+0xc6>
 80030ac:	2a0b      	cmp	r2, #11
 80030ae:	d916      	bls.n	80030de <_malloc_r+0xba>
 80030b0:	1961      	adds	r1, r4, r5
 80030b2:	42a3      	cmp	r3, r4
 80030b4:	6025      	str	r5, [r4, #0]
 80030b6:	bf18      	it	ne
 80030b8:	6059      	strne	r1, [r3, #4]
 80030ba:	6863      	ldr	r3, [r4, #4]
 80030bc:	bf08      	it	eq
 80030be:	6031      	streq	r1, [r6, #0]
 80030c0:	5162      	str	r2, [r4, r5]
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	4638      	mov	r0, r7
 80030c6:	f104 060b 	add.w	r6, r4, #11
 80030ca:	f000 f8cf 	bl	800326c <__malloc_unlock>
 80030ce:	f026 0607 	bic.w	r6, r6, #7
 80030d2:	1d23      	adds	r3, r4, #4
 80030d4:	1af2      	subs	r2, r6, r3
 80030d6:	d0b6      	beq.n	8003046 <_malloc_r+0x22>
 80030d8:	1b9b      	subs	r3, r3, r6
 80030da:	50a3      	str	r3, [r4, r2]
 80030dc:	e7b3      	b.n	8003046 <_malloc_r+0x22>
 80030de:	6862      	ldr	r2, [r4, #4]
 80030e0:	42a3      	cmp	r3, r4
 80030e2:	bf0c      	ite	eq
 80030e4:	6032      	streq	r2, [r6, #0]
 80030e6:	605a      	strne	r2, [r3, #4]
 80030e8:	e7ec      	b.n	80030c4 <_malloc_r+0xa0>
 80030ea:	4623      	mov	r3, r4
 80030ec:	6864      	ldr	r4, [r4, #4]
 80030ee:	e7b2      	b.n	8003056 <_malloc_r+0x32>
 80030f0:	4634      	mov	r4, r6
 80030f2:	6876      	ldr	r6, [r6, #4]
 80030f4:	e7b9      	b.n	800306a <_malloc_r+0x46>
 80030f6:	230c      	movs	r3, #12
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4638      	mov	r0, r7
 80030fc:	f000 f8b6 	bl	800326c <__malloc_unlock>
 8003100:	e7a1      	b.n	8003046 <_malloc_r+0x22>
 8003102:	6025      	str	r5, [r4, #0]
 8003104:	e7de      	b.n	80030c4 <_malloc_r+0xa0>
 8003106:	bf00      	nop
 8003108:	200000e0 	.word	0x200000e0

0800310c <_sbrk_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d06      	ldr	r5, [pc, #24]	; (8003128 <_sbrk_r+0x1c>)
 8003110:	2300      	movs	r3, #0
 8003112:	4604      	mov	r4, r0
 8003114:	4608      	mov	r0, r1
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	f7fd fd40 	bl	8000b9c <_sbrk>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_sbrk_r+0x1a>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	b103      	cbz	r3, 8003126 <_sbrk_r+0x1a>
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	200000e8 	.word	0x200000e8

0800312c <__sread>:
 800312c:	b510      	push	{r4, lr}
 800312e:	460c      	mov	r4, r1
 8003130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003134:	f000 f8a0 	bl	8003278 <_read_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	bfab      	itete	ge
 800313c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800313e:	89a3      	ldrhlt	r3, [r4, #12]
 8003140:	181b      	addge	r3, r3, r0
 8003142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003146:	bfac      	ite	ge
 8003148:	6563      	strge	r3, [r4, #84]	; 0x54
 800314a:	81a3      	strhlt	r3, [r4, #12]
 800314c:	bd10      	pop	{r4, pc}

0800314e <__swrite>:
 800314e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003152:	461f      	mov	r7, r3
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	4616      	mov	r6, r2
 800315e:	d505      	bpl.n	800316c <__swrite+0x1e>
 8003160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003164:	2302      	movs	r3, #2
 8003166:	2200      	movs	r2, #0
 8003168:	f000 f868 	bl	800323c <_lseek_r>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	4632      	mov	r2, r6
 800317a:	463b      	mov	r3, r7
 800317c:	4628      	mov	r0, r5
 800317e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003182:	f000 b817 	b.w	80031b4 <_write_r>

08003186 <__sseek>:
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318e:	f000 f855 	bl	800323c <_lseek_r>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	bf15      	itete	ne
 8003198:	6560      	strne	r0, [r4, #84]	; 0x54
 800319a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800319e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031a2:	81a3      	strheq	r3, [r4, #12]
 80031a4:	bf18      	it	ne
 80031a6:	81a3      	strhne	r3, [r4, #12]
 80031a8:	bd10      	pop	{r4, pc}

080031aa <__sclose>:
 80031aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ae:	f000 b813 	b.w	80031d8 <_close_r>
	...

080031b4 <_write_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4d07      	ldr	r5, [pc, #28]	; (80031d4 <_write_r+0x20>)
 80031b8:	4604      	mov	r4, r0
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	2200      	movs	r2, #0
 80031c0:	602a      	str	r2, [r5, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f7fd fc99 	bl	8000afa <_write>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_write_r+0x1e>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_write_r+0x1e>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	200000e8 	.word	0x200000e8

080031d8 <_close_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d06      	ldr	r5, [pc, #24]	; (80031f4 <_close_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4604      	mov	r4, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f7fd fca5 	bl	8000b32 <_close>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_close_r+0x1a>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_close_r+0x1a>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	200000e8 	.word	0x200000e8

080031f8 <_fstat_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4d07      	ldr	r5, [pc, #28]	; (8003218 <_fstat_r+0x20>)
 80031fc:	2300      	movs	r3, #0
 80031fe:	4604      	mov	r4, r0
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	f7fd fca0 	bl	8000b4a <_fstat>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d102      	bne.n	8003214 <_fstat_r+0x1c>
 800320e:	682b      	ldr	r3, [r5, #0]
 8003210:	b103      	cbz	r3, 8003214 <_fstat_r+0x1c>
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	bd38      	pop	{r3, r4, r5, pc}
 8003216:	bf00      	nop
 8003218:	200000e8 	.word	0x200000e8

0800321c <_isatty_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4d06      	ldr	r5, [pc, #24]	; (8003238 <_isatty_r+0x1c>)
 8003220:	2300      	movs	r3, #0
 8003222:	4604      	mov	r4, r0
 8003224:	4608      	mov	r0, r1
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	f7fd fc9f 	bl	8000b6a <_isatty>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_isatty_r+0x1a>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	b103      	cbz	r3, 8003236 <_isatty_r+0x1a>
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	200000e8 	.word	0x200000e8

0800323c <_lseek_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4d07      	ldr	r5, [pc, #28]	; (800325c <_lseek_r+0x20>)
 8003240:	4604      	mov	r4, r0
 8003242:	4608      	mov	r0, r1
 8003244:	4611      	mov	r1, r2
 8003246:	2200      	movs	r2, #0
 8003248:	602a      	str	r2, [r5, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f7fd fc98 	bl	8000b80 <_lseek>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_lseek_r+0x1e>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	b103      	cbz	r3, 800325a <_lseek_r+0x1e>
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	200000e8 	.word	0x200000e8

08003260 <__malloc_lock>:
 8003260:	4801      	ldr	r0, [pc, #4]	; (8003268 <__malloc_lock+0x8>)
 8003262:	f7ff be0b 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8003266:	bf00      	nop
 8003268:	200000dc 	.word	0x200000dc

0800326c <__malloc_unlock>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__malloc_unlock+0x8>)
 800326e:	f7ff be06 	b.w	8002e7e <__retarget_lock_release_recursive>
 8003272:	bf00      	nop
 8003274:	200000dc 	.word	0x200000dc

08003278 <_read_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4d07      	ldr	r5, [pc, #28]	; (8003298 <_read_r+0x20>)
 800327c:	4604      	mov	r4, r0
 800327e:	4608      	mov	r0, r1
 8003280:	4611      	mov	r1, r2
 8003282:	2200      	movs	r2, #0
 8003284:	602a      	str	r2, [r5, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f7fd fc1a 	bl	8000ac0 <_read>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_read_r+0x1e>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_read_r+0x1e>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	200000e8 	.word	0x200000e8

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr
